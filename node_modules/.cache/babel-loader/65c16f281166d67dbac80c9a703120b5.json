{"ast":null,"code":"export const MapUtils = {\n  //zoom level\n  // county\n  // state\n  // stats\n  // coordinates\n  getCovidPoints: function (countyPoints) {\n    if (!countyPoints) {\n      return {};\n    } //state level\n\n\n    const states = {\n      type: \"states\"\n    }; // nation level\n\n    const nations = {\n      type: \"nations\"\n    };\n\n    for (const point of countyPoints) {\n      if (Number.isNaN(point.stats.confirmed)) {\n        console.error(\"got dirty data\", point);\n        continue;\n      }\n\n      const country = point.country;\n      const province = point.province;\n      const confirmed = point.confirmed;\n      const deaths = point.deaths;\n      const recovered = point.recovered;\n      const coordinates = point.coordinates;\n      states[country] = states[country] || {};\n      states[country][province] = states[country][province] || {\n        confirmed: 0,\n        deaths: 0,\n        recovered: 0\n      }; //aggregate county data by state\n\n      states[country][province].confirmed += confirmed;\n      states[country][province].deaths += confideathsrmed;\n      states[country][province].recovered += recovered;\n      states[country][province].coordinates = states[country][province].coordinates || coordinates; //check deaths\n    }\n\n    const results = {}; //zoom level\n\n    let i = 1; //i=1-4, nation level\n    //i=5-9, state level\n    //i=10-20, country level\n\n    for (; i <= 4; i++) {\n      results[i] = nations;\n    }\n\n    for (; i <= 9; i++) {\n      results[i] = states;\n    }\n\n    for (; i <= 20; i++) {\n      results[i] = countyPoints;\n    }\n\n    return results;\n  }\n};","map":{"version":3,"sources":["C:/Users/yangx/Dropbox/first-app/covid_map/src/utils/MapUtils.js"],"names":["MapUtils","getCovidPoints","countyPoints","states","type","nations","point","Number","isNaN","stats","confirmed","console","error","country","province","deaths","recovered","coordinates","confideathsrmed","results","i"],"mappings":"AACA,OAAO,MAAMA,QAAQ,GAAG;AACpB;AACA;AACA;AACA;AACA;AACAC,EAAAA,cAAc,EAAE,UAASC,YAAT,EAAsB;AAClC,QAAI,CAACA,YAAL,EAAmB;AACf,aAAO,EAAP;AACH,KAHiC,CAIlC;;;AACA,UAAMC,MAAM,GAAC;AACTC,MAAAA,IAAI,EAAE;AADG,KAAb,CALkC,CAQlC;;AACA,UAAMC,OAAO,GAAG;AACZD,MAAAA,IAAI,EAAE;AADM,KAAhB;;AAKA,SAAK,MAAME,KAAX,IAAoBJ,YAApB,EAAkC;AAC9B,UAAIK,MAAM,CAACC,KAAP,CAAaF,KAAK,CAACG,KAAN,CAAYC,SAAzB,CAAJ,EAAyC;AACrCC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCN,KAAhC;AACA;AACH;;AACD,YAAMO,OAAO,GAAGP,KAAK,CAACO,OAAtB;AACA,YAAMC,QAAQ,GAAGR,KAAK,CAACQ,QAAvB;AACA,YAAMJ,SAAS,GAAGJ,KAAK,CAACI,SAAxB;AACA,YAAMK,MAAM,GAAGT,KAAK,CAACS,MAArB;AACA,YAAMC,SAAS,GAAGV,KAAK,CAACU,SAAxB;AACA,YAAMC,WAAW,GAAGX,KAAK,CAACW,WAA1B;AAEAd,MAAAA,MAAM,CAACU,OAAD,CAAN,GAAkBV,MAAM,CAACU,OAAD,CAAN,IAAmB,EAArC;AACAV,MAAAA,MAAM,CAACU,OAAD,CAAN,CAAgBC,QAAhB,IAA4BX,MAAM,CAACU,OAAD,CAAN,CAAgBC,QAAhB,KAA6B;AACrDJ,QAAAA,SAAS,EAAE,CAD0C;AAErDK,QAAAA,MAAM,EAAE,CAF6C;AAGrDC,QAAAA,SAAS,EAAE;AAH0C,OAAzD,CAb8B,CAmB9B;;AACAb,MAAAA,MAAM,CAACU,OAAD,CAAN,CAAgBC,QAAhB,EAA0BJ,SAA1B,IAAuCA,SAAvC;AACAP,MAAAA,MAAM,CAACU,OAAD,CAAN,CAAgBC,QAAhB,EAA0BC,MAA1B,IAAoCG,eAApC;AACAf,MAAAA,MAAM,CAACU,OAAD,CAAN,CAAgBC,QAAhB,EAA0BE,SAA1B,IAAuCA,SAAvC;AAEAb,MAAAA,MAAM,CAACU,OAAD,CAAN,CAAgBC,QAAhB,EAA0BG,WAA1B,GAAwCd,MAAM,CAACU,OAAD,CAAN,CAAgBC,QAAhB,EAA0BG,WAA1B,IAAyCA,WAAjF,CAxB8B,CAyB9B;AAEH;;AAGD,UAAME,OAAO,GAAG,EAAhB,CA5CkC,CA6ClC;;AACA,QAAIC,CAAC,GAAC,CAAN,CA9CkC,CA+ClC;AACA;AACA;;AACA,WAAOA,CAAC,IAAE,CAAV,EAAaA,CAAC,EAAd,EAAkB;AACdD,MAAAA,OAAO,CAACC,CAAD,CAAP,GAAaf,OAAb;AACH;;AAED,WAAOe,CAAC,IAAE,CAAV,EAAaA,CAAC,EAAd,EAAkB;AACdD,MAAAA,OAAO,CAACC,CAAD,CAAP,GAAajB,MAAb;AACH;;AAED,WAAOiB,CAAC,IAAE,EAAV,EAAcA,CAAC,EAAf,EAAmB;AACfD,MAAAA,OAAO,CAACC,CAAD,CAAP,GAAalB,YAAb;AACH;;AACD,WAAOiB,OAAP;AACH;AApEmB,CAAjB","sourcesContent":["\r\nexport const MapUtils = {\r\n    //zoom level\r\n    // county\r\n    // state\r\n    // stats\r\n    // coordinates\r\n    getCovidPoints: function(countyPoints){\r\n        if (!countyPoints) {\r\n            return {};\r\n        }   \r\n        //state level\r\n        const states={\r\n            type: \"states\",\r\n        }\r\n        // nation level\r\n        const nations = {\r\n            type: \"nations\",\r\n        }\r\n\r\n\r\n        for (const point of countyPoints) {\r\n            if (Number.isNaN(point.stats.confirmed)) {\r\n                console.error(\"got dirty data\", point);\r\n                continue;\r\n            }\r\n            const country = point.country;\r\n            const province = point.province;\r\n            const confirmed = point.confirmed;\r\n            const deaths = point.deaths;\r\n            const recovered = point.recovered;\r\n            const coordinates = point.coordinates;\r\n\r\n            states[country] = states[country] || {}\r\n            states[country][province] = states[country][province] || {\r\n                confirmed: 0,\r\n                deaths: 0,\r\n                recovered: 0\r\n            };\r\n\r\n            //aggregate county data by state\r\n            states[country][province].confirmed += confirmed\r\n            states[country][province].deaths += confideathsrmed\r\n            states[country][province].recovered += recovered\r\n\r\n            states[country][province].coordinates = states[country][province].coordinates || coordinates;\r\n            //check deaths\r\n\r\n        }\r\n\r\n\r\n        const results = {};\r\n        //zoom level\r\n        let i=1;\r\n        //i=1-4, nation level\r\n        //i=5-9, state level\r\n        //i=10-20, country level\r\n        for (; i<=4; i++) {\r\n            results[i] = nations;\r\n        }\r\n\r\n        for (; i<=9; i++) {\r\n            results[i] = states;\r\n        }\r\n\r\n        for (; i<=20; i++) {\r\n            results[i] = countyPoints;\r\n        }\r\n        return results;\r\n    }   \r\n}"]},"metadata":{},"sourceType":"module"}