{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yangx\\\\Dropbox\\\\first-app\\\\covid_map\\\\src\\\\component\\\\Map.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport CountyCard from './card/CountyCard';\nimport StateCard from './card/StateCard';\nimport { MapService } from './services/MapServices';\nimport { MapUtils } from '../utils/MapUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardLocator = ({\n  children\n}) => children;\n\n_c = CardLocator;\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      zoom: 11,\n      boundary: {},\n      points: {}\n    };\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      /*#__PURE__*/\n      // Important! Always set the container height explicitly\n      _jsxDEV(\"div\", {\n        style: {\n          height: '100vh',\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n          bootstrapURLKeys: {\n            key: \"AIzaSyAzLxHQX3ij-pTYQQGjsjC26IW29pVnqkw\"\n          },\n          defaultCenter: this.props.center,\n          defaultZoom: this.props.zoom,\n          yesIWantToUseGoogleMapApiInternals: true,\n          onGoogleApiLoaded: ({\n            map,\n            maps\n          }) => {\n            //1. call backend api to get covid data\n            MapService.getUSCovidData().then(response => {\n              //2. data handling\n              const coviddataPoints = MapUtils.getUSCovidPoints(response.data); //console.log(coviddataPoints);\n              //3. setState\n\n              this.setState({\n                points: coviddataPoints\n              });\n            }).catch(error => console.error(error));\n          },\n          onChange: changeObject => {\n            this.setState({\n              zoom: changeObject.zoom,\n              boundary: changeObject.bounds\n            });\n          },\n          children: this.renderCard()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n  renderCard() {\n    const results = [];\n    const points = this.state.points[this.state.zoom];\n\n    if (!points) {\n      return [];\n    }\n\n    if (Array.isArray(points)) {\n      //points is array - county level data\n      //console.log(points)\n      for (const county of points) {\n        //console.log(county.coordinates, 'cooridnates')\n        if (MapUtils.isInBoundary(this.state.boundary, county.coordinates)) {\n          //                console.log(this.state.boundary, county.coordinates)\n          results.push( /*#__PURE__*/_jsxDEV(CardLocator, {\n            lat: county.coordinates.latitude,\n            lng: county.coordinates.longitude //thisSetMap = {this.setState}\n            ,\n            children: /*#__PURE__*/_jsxDEV(CountyCard, {\n              county: county.county,\n              confirmed: county.stats.confirmed,\n              deaths: county.stats.deaths,\n              recovered: county.stats.recovered\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this));\n        }\n      }\n    }\n\n    if (points.type === \"states\") {\n      for (const nation in points) {\n        for (const state in points[nation]) {\n          // state is a string key; we should use points[nation][state]\n          if (MapUtils.isInBoundary(this.state.boundary, points[nation][state].coordinates)) {\n            results.push( /*#__PURE__*/_jsxDEV(CardLocator, {\n              lat: points[nation][state].coordinates.latitude,\n              lng: points[nation][state].coordinates.longitude,\n              children: /*#__PURE__*/_jsxDEV(StateCard, {\n                state: state,\n                ...points[nation][state]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 25\n              }, this)\n            }, state + \"-key\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 25\n            }, this));\n          }\n        }\n      }\n    }\n\n    return results;\n  }\n\n}\n\nMap.defaultProps = {\n  center: {\n    lat: 42,\n    lng: -74\n  },\n  zoom: 11\n};\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardLocator\");","map":{"version":3,"sources":["C:/Users/yangx/Dropbox/first-app/covid_map/src/component/Map.js"],"names":["React","Component","GoogleMapReact","CountyCard","StateCard","MapService","MapUtils","CardLocator","children","Map","state","zoom","boundary","points","render","console","log","height","width","key","props","center","map","maps","getUSCovidData","then","response","coviddataPoints","getUSCovidPoints","data","setState","catch","error","changeObject","bounds","renderCard","results","Array","isArray","county","isInBoundary","coordinates","push","latitude","longitude","stats","confirmed","deaths","recovered","type","nation","defaultProps","lat","lng"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport CountyCard from './card/CountyCard';\r\nimport StateCard from './card/StateCard';\r\nimport { MapService } from './services/MapServices';\r\nimport { MapUtils } from '../utils/MapUtils';\r\n\r\nconst CardLocator = ({ children }) => children;\r\n\r\nclass Map extends Component {\r\n  static defaultProps = {\r\n    center: {\r\n      lat: 42,\r\n      lng: -74\r\n    },\r\n    zoom: 11\r\n  };\r\n  \r\n  state = {\r\n      zoom: 11,\r\n      boundary: {},\r\n      points: {},\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state)\r\n    return (\r\n      // Important! Always set the container height explicitly\r\n      <div style={{ height: '100vh', width: '100%' }}>\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: \"AIzaSyAzLxHQX3ij-pTYQQGjsjC26IW29pVnqkw\" }}\r\n          defaultCenter={this.props.center}\r\n          defaultZoom={this.props.zoom}\r\n          yesIWantToUseGoogleMapApiInternals\r\n          onGoogleApiLoaded={({map, maps})=> {\r\n              //1. call backend api to get covid data\r\n              MapService.getUSCovidData()\r\n              .then((response)=> {\r\n                  //2. data handling\r\n                  const coviddataPoints = MapUtils.getUSCovidPoints(response.data);\r\n                  //console.log(coviddataPoints);\r\n                  //3. setState\r\n                  this.setState({\r\n                      points: coviddataPoints,\r\n                  })\r\n              })\r\n              .catch(error => console.error(error));\r\n          }}\r\n          onChange={(changeObject)=>{\r\n              this.setState({\r\n                  zoom: changeObject.zoom,\r\n                  boundary: changeObject.bounds,\r\n              })\r\n          }\r\n        }\r\n        >\r\n        {this.renderCard()}\r\n        </GoogleMapReact>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderCard() {\r\n      const results = [];\r\n      const points = this.state.points[this.state.zoom];\r\n\r\n      if (!points) {\r\n          return [];\r\n      }\r\n      if (Array.isArray(points)) {\r\n          //points is array - county level data\r\n          //console.log(points)\r\n          for (const county of points) {\r\n            //console.log(county.coordinates, 'cooridnates')\r\n            if (MapUtils.isInBoundary(this.state.boundary, county.coordinates)) {\r\n//                console.log(this.state.boundary, county.coordinates)\r\n                results.push(\r\n                    <CardLocator\r\n                    lat={county.coordinates.latitude}\r\n                    lng={county.coordinates.longitude}\r\n                    //thisSetMap = {this.setState}\r\n                >\r\n                    <CountyCard \r\n                      county={county.county}\r\n                      confirmed={county.stats.confirmed}\r\n                      deaths={county.stats.deaths}\r\n                      recovered={county.stats.recovered}\r\n                    />\r\n\r\n                </CardLocator>\r\n                )\r\n            }\r\n          }\r\n      }\r\n      if (points.type === \"states\") {\r\n          for (const nation in points) {\r\n              for (const state in points[nation]) { // state is a string key; we should use points[nation][state]\r\n                if (MapUtils.isInBoundary(this.state.boundary, points[nation][state].coordinates)) {\r\n                    results.push(\r\n                        <CardLocator\r\n                        key={state + \"-key\"}\r\n                        lat={points[nation][state].coordinates.latitude}\r\n                        lng={points[nation][state].coordinates.longitude}\r\n                    >\r\n                        <StateCard \r\n                          state={state}\r\n                          {...points[nation][state]}\r\n                        />\r\n    \r\n                    </CardLocator>\r\n                    )                 \r\n              }\r\n          }\r\n      }\r\n    }\r\n    return results\r\n}\r\n}\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}